@using NRC.Reveal.KoTables.Models
@{
    ViewBag.Title = "Localizing";
    ViewBag.Breadcrumbs = ViewBag.Breadcrumbs ?? new LinkedList<Breadcrumb>();
    ViewBag.Breadcrumbs.AddFirst(new Breadcrumb("Localizing", "/Home/Localizing"));
}

<table>
    <thead>
        <tr>
            <td>
                <span style="float: left">@Tiny.NameColumnHeader</span>
                <div style="float: left">
                    <img src="/Content/chevron-up.png" data-bind="click: sort.addSort('name', false)" height="10px" width="10px" />
                    <img src="/Content/chevron-down.png" data-bind="click: sort.addSort('name', true)" height="10px" width="10px" />
                </div>
            </td>
            <td>
                <span style="float: left">@Tiny.PriceColumnHeader</span>
                <div style="float: left">
                    <img src="/Content/chevron-up.png" data-bind="click: sort.addSort('price', false)" height="10px" width="10px" />
                    <img src="/Content/chevron-down.png" data-bind="click: sort.addSort('price', true)" height="10px" width="10px" />
                </div>
            </td>
        </tr>
        <tr data-bind="foreach: columns()">
            <td>
                <input data-bind="value: $parent.filter.filterFor(name), valueUpdate: 'afterkeydown'"/>
            </td>
        </tr>
    </thead>
    <tbody data-bind="foreach: page.outputArray()">
        <tr data-bind="foreach: $parent.columns()">
            <td data-bind="text: $parent[name]"></td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td data-bind="attr: { colspan: columns().length }">
                <span style="margin-right: 20px">
                    @{
                        string selectPageSize = @"<select data-bind=""options: page.availablePageSizes, optionsValue: 'value', optionsText: 'name', value: page.currentPageSize"" ></select>";
                    }
                    @Html.Raw(string.Format(Tiny.PerPageFormat, selectPageSize))
                </span>
                <input type="button" data-bind="click: page.prevPage" value="-" />
                @{
                    string currentPage = @"<input style=""width: 40px"" data-bind=""value: page.currentPage"" />";
                    string maxPage = @"<span data-bind=""text: page.maxPage()""></span>";
                }
                <span>@Html.Raw(string.Format(Tiny.PagingStatusFormat, currentPage, maxPage))</span>
                <input type="button" data-bind="click: page.nextPage" value="+" />
            </td>
        </tr>
    </tfoot>
</table>

@section Scripts {
    <script type="text/javascript">
        jQuery(document).ready(function () {
            var Model = function() {
                this.columns = ko.observableArray([]);
                this.data = ko.observable([]);
                
                this.onDataSourceChanging = function () {
                    this.filter.clearFilters();
                }
                
                this.onDataSourceChanged = function () {
                }

                // Filtering
                this.filter = new ColumnFilter(this.data);

                // Sorting
                this.sort = new Sort(this.filter.outputArray);

                // Paging
                this.page = new Page(this.sort.outputArray, 10);
            };

            var model = new Model();
            registerModel(model);
            changeDataSource("Tiny");
            ko.applyBindings(model);
        });
    </script>
}
