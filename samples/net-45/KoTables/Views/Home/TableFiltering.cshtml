@using NRC.Reveal.KoTables.Models
@{
    ViewBag.Title = "Table Filtering";
    Layout = "~/Views/Shared/_DataSourceLayout.cshtml";
    ViewBag.Breadcrumbs = ViewBag.Breadcrumbs ?? new LinkedList<Breadcrumb>();
    ViewBag.Breadcrumbs.AddFirst(new Breadcrumb(ViewBag.Title, "/Home/TableFiltering"));
}

<span style="margin-left: 20px">Search:</span><input data-bind="value: filter.filterExpression, valueUpdate: 'afterkeydown'"/>
<table>
    <thead>
        <tr data-bind="foreach: columns()">
            <td>
                <span style="float: left" data-bind="text: description"></span>
                <div style="float: left">
                    <img src="/Content/chevron-up.png" data-bind="click: $parent.sort.addSort(name, false)" height="10px" width="10px" />
                    <img src="/Content/chevron-down.png" data-bind="click: $parent.sort.addSort(name, true)" height="10px" width="10px" />
                </div>
            </td>
        </tr>
    </thead>
    <tbody data-bind="foreach: page.outputArray()">
        <tr data-bind="foreach: $parent.columns()">
            <td data-bind="text: $parent[name]"></td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td data-bind="attr: { colspan: columns().length }">
                <select data-bind="options: page.availablePageSizes, optionsValue: 'value', optionsText: 'name', value: page.currentPageSize" ></select>
                <span style="margin-right: 20px">per page</span>
                <input type="button" data-bind="click: page.prevPage" value="-" />
                <span>Page </span>
                <input style="width: 40px" data-bind="value: page.currentPage" />
                <span> of </span>
                <span data-bind="text: page.maxPage()"></span>
                <input type="button" data-bind="click: page.nextPage" value="+" />
            </td>
        </tr>
    </tfoot>
</table>

@section Scripts {
    <script type="text/javascript">
        jQuery(document).ready(function () {
            var Model = function() {
                this.columns = ko.observableArray([]);
                this.data = ko.observableArray([]);
                
                this.onDataSourceChanging = function () {
                    this.filter.clearFilter();
                }

                this.onDataSourceChanged = function () {
                    this.filter.columnsToSearch(ko.utils.arrayMap(this.columns(), function(item) {
                        return item.name;
                    }));
                }

                // Filtering
                this.filter = new TableFilter(this.data, ko.observableArray([]));

                // Sorting
                this.sort = new Sort(this.filter.outputArray);

                // Paging
                this.page = new Page(this.sort.outputArray, 10);
            };

            var model = new Model();
            registerModel(model);
            changeDataSource("Tiny");
            ko.applyBindings(model);
        });
    </script>
}
